Git Commands

Basic Commands

git init -> Command to initialize an empty git repository.
git status -> To check the status of the files untracked or staging area.
git add . -> Adds all files from untracked state to the staging area.
git add <filename> -> Adds only specific file from untracked state to staging area.
git commit -m "Some Message" -> Commits the file from staging area.

To merge master into main branch use the command(Follow github for more details)

git branch -M main -> This makes the branch main instead of master.

Intermediate commands 

git log -> Logs all the committed data
git restore --stage <filename> -> Moves the file from staging area to untracked state.
git reset <commitID> -> will move the changes above commit ID to untracked state.
git stash -> Will remove the changes done in the file from untracked state to stash area
git stash pop -> Will bring back the changes done from stash area to untracked state.

Advanced Commands

git remote add origin https://github.com/AkhileshRM/Javascript-Concepts.git ->
To include your new project to Github repository.
git remote -v -> Will show all the URLs attached to this folder.
git remote rm origin -> This will remove the origin from the git repository.(To add use the previous add command)
git branch <branchname> -> To create new branch
git checkout <branchname> -> Head points to feature branch
git merge <branchname> -> To merge feature branch to main branch
git branch -d <branchname> -> To delete the branch locally using git command(make sure code is merged to main branch)

Push and Pull Requests Commands

git push origin <featurebranch> -> After commit use this to raise a Pull Request(PR).
git pull origin main -> Add this command to get the latest code from main
git pull upstream main -> Suppose project is forked then to get code from main project's main branch use this command.

Cloning repository Commands

git clone https://github.com/AkhileshRM/commclassroomOP.git -> This will clone the repository
git remote add upstream https://github.com/AkhileshRM/commclassroomOP.git -> origin means yours 
upstream means from where the project has been forked.

Notes

Head is a pointer for the branch
Steps to merge master into main(This is a optional step not required)
1. git fetch --all
2. git checkout main
3. git merge master --allow-unrelated-histories -> This tells Git to merge the two branches even though they do not share a common ancestor.
4. git add .
5. git commit
6. git push origin main
main will now contain all code from both main and master

Ultra Advanced Commands

git rebase -i  ac9269b449e16f6840c49706de291936e7017fce Squashing commits or combining multiple commits into 1 commit.
-i stands for interactive envrionment

Merge Conflicts
To create a conflict create 2 new branches and commit on the same file then resolve it.

In Github resolving 2 changes are separated by =====

To resolve using VS CODE after pushing the changes take a pull from the main.
The merge editor will open then select incoming or current as needed.
Then Click on Merge and commit the code.
Last step use command git push origin <feature branch>
Merge Conflict will be automatically resolved in Github.